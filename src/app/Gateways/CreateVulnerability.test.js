import createVulnerability from './CreateVulnerability';
import { enableFetchMocks } from 'jest-fetch-mock';
import { hackneyToken } from '../lib/Cookie';
jest.mock('../lib/Cookie');

describe('CreateVulnerability', () => {
  beforeEach(() => {
    enableFetchMocks();
    hackneyToken.mockImplementation(() => 'token');
    process.env.REACT_APP_HN_API_URL = 'http://svapi';
    process.env.REACT_APP_VULNERABILITIES_URL = 'http://vulnerabilities';
  });

  it('can create a snapshot', async () => {
    fetch.mockResponse(JSON.stringify({ snapshotId: 'snap1' }));
    const result = await createVulnerability({ customerId: 1 });
    expect(fetch).toHaveBeenCalledWith(
      'http://svapi/customers/1/vulnerabilities',
      {
        headers: { Authorization: 'Bearer token' },
        method: 'POST'
      }
    );
    expect(result).toEqual({
      location: 'http://vulnerabilities/snapshots/snap1'
    });
  });

  it('throws an error if create snapshot fails', async () => {
    fetch.mockImplementationOnce(() => ({ ok: false }));
    await expect(createVulnerability({ customerId: 1 })).rejects.toThrow(Error);
  });
});
